// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  locale        String    @default("en")
  
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  transactions  Transaction[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Portfolio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings     Holding[]
  transactions Transaction[]
  
  @@map("portfolios")
}

model Asset {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  symbol      String   @unique
  name        String
  type        String   // stock, bond, etf, crypto, etc.
  exchange    String?
  currency    String   @default("USD")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  holdings     Holding[]
  transactions Transaction[]
  marketData   MarketData[]
  
  @@map("assets")
}

model Holding {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId String  @db.ObjectId
  assetId     String  @db.ObjectId
  quantity    Float
  avgCost     Float
  currentValue Float?
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset     Asset     @relation(fields: [assetId], references: [id])
  
  @@unique([portfolioId, assetId])
  @@map("holdings")
}

model Transaction {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  portfolioId String      @db.ObjectId
  assetId     String      @db.ObjectId
  type        String      // buy, sell, dividend, etc.
  quantity    Float
  price       Float
  fees        Float       @default(0)
  total       Float
  date        DateTime
  notes       String?
  createdAt   DateTime    @default(now())
  
  user      User      @relation(fields: [userId], references: [id])
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  asset     Asset     @relation(fields: [assetId], references: [id])
  
  @@map("transactions")
}

model MarketData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  assetId   String   @db.ObjectId
  price     Float
  change    Float?
  changePercent Float?
  volume    Int?
  marketCap Float?
  timestamp DateTime @default(now())
  
  asset Asset @relation(fields: [assetId], references: [id])
  
  @@unique([assetId, timestamp])
  @@map("marketdata")
}
